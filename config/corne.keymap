/*
* Copyright (c) 2020 The ZMK Contributors
*
* SPDX-License-Identifier: MIT
*/
/*
╭────────────────────────┬────────────────────────╮
│  0   1   2   3   4   5 │  6   7   8   9  10  11 │
│ 12  13  14  15  16  17 │ 18  19  20  21  22  23 │
│ 24  25  26  27  28  29 │ 30  31  32  33  34  35 │
╰───────────╮ 36  37  38 │ 39  40  41 ╭───────────╯
............╰────────────┴────────────╯
*/

#define ZMK_POINTING_DEFAULT_MOVE_VAL 1100// mouse move
#define ZMK_POINTING_DEFAULT_SCRL_VAL 18// mouse scroll

#include <dt-bindings/zmk/pointing.h>
#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>

/* ------ MOUSE MOVE SETTINGS----- */
&mmv {
	time-to-max-speed-ms = <700>;
	acceleration-exponent = <1>;
};

/* ------MOUSE SCROLL SETTINGS----- */
&msc {
	time-to-max-speed-ms = <100>;
	acceleration-exponent = <0>;
};
/* ------------------------------- */

/ {
	behaviors {
		hml: hml {
			compatible = "zmk,behavior-hold-tap";
			#binding-cells = <2>;
			bindings = <&kp>, <&kp>;
			
			tapping-term-ms = <280>;
			flavor = "balanced";
			quick-tap-ms = <175>;
			require-prior-idle-ms = <150>;
			hold-trigger-key-positions = <6 7 8 9 10 11 18 19 20 21 22 23 30 31 32 33 34 35 39 40 41 38 37 36>;
			hold-trigger-on-release;
		};
		
		hmr: hmr {
			compatible = "zmk,behavior-hold-tap";
			#binding-cells = <2>;
			bindings = <&kp>, <&kp>;
			
			tapping-term-ms = <280>;
			flavor = "balanced";
			
			// when pressed _again_ within this time tap behavior will be triggered			
			quick-tap-ms = <175>;
			
			// require-prior-idle-ms is like quick-tap-ms however it will apply for any non-modifier key pressed before it. 
			// dus key a > shift b (shift b is dan waar dit gedefineerd is) binnen deze tijd is alijd ab.
			// This effectively disables the hold-tap when typing quickly.
			
			require-prior-idle-ms = <150>;
			
			// if you press any key NOT listed in hold-trigger-key-positions before tapping-term-ms expires, it will produce a tap.
			// dus een key die wel in deze lijst staat houd de hold trigger aan.
			
			hold-trigger-key-positions = <0 1 2 3 4 5 12 13 14 15 16 17 24 25 26 27 28 29 36 37 38 39 41 40>;
			hold-trigger-on-release;
		};
		
		moto: moto {
			compatible = "zmk,behavior-hold-tap";
			bindings = <&kp>, <&to>;
			
			#binding-cells = <2>;
			tapping-term-ms = <200>;
		};
	};
	
	combos {
		compatible = "zmk,combos";
		combo_caps_lock {
			timeout-ms = <50>;
			key-positions = <13 22>;// Left A + Right semicolon
			bindings = <&kp CAPS>;
		};
	};
	
	keymap {
		compatible = "zmk,keymap";
		
		default_layer {
			// -----------------------------------------------------------------------------------------
			// |  TAB |  Q  |  W  |  E  |  R  |  T  |   |  Y  |  U   |  I  |  O  |  P  | BKSP |
			// | CTRL |  A  |  S  |  D  |  F  |  G  |   |  H  |  J   |  K  |  L  |  ;  |  '   |
			// | SHFT |  Z  |  X  |  C  |  V  |  B  |   |  N  |  M   |  ,  |  .  |  /  | ESC  |
			//                    | GUI | LWR | SPC |   | ENT | RSE  | ALT |
			
			bindings = <
			&kp TAB     &kp Q         &kp W            &kp E                 &kp R              &kp T         &kp Y      &kp U               &kp I                 &kp O             &kp P                 &kp BSPC
			&none       &hml LCTRL A  &hml LEFT_ALT S  &hml LEFT_COMMAND D   &hml LEFT_SHIFT F  &kp G         &kp H      &hmr RIGHT_SHIFT J  &hmr RIGHT_COMMAND K  &hmr RIGHT_ALT L  &hmr RCTRL SEMICOLON  &hmr RIGHT_SHIFT APOS
			&kp ESCAPE  &kp Z         &kp X            &kp C                 &kp V              &kp B         &kp N      &kp M               &kp COMMA             &kp DOT           &kp FSLH              &kp ESC
			&moto LEFT_COMMAND 4  &to 1              &kp RETURN    &kp SPACE  &to 2               &moto RIGHT_ALT 5
			>;
		};
		
		symbol {
			bindings = <
			&trans  &kp EXCLAMATION   &kp AT               &kp HASH                      &kp DOLLAR                        &kp PERCENT          &kp CARET  &kp AMPS                &kp ASTERISK              &kp UNDERSCORE       &none      &trans
			&to 0   &hml LCTRL GRAVE  &hml LEFT_ALT TILDE  &hml LEFT_COMMAND LEFT_BRACE  &hml LEFT_SHIFT LEFT_PARENTHESIS  &kp LEFT_BRACKET     &kp PIPE   &hmr RIGHT_SHIFT MINUS  &hmr RIGHT_COMMAND EQUAL  &hmr RIGHT_ALT PLUS  &kp LCTRL  &trans
			&trans  &kp LESS_THAN     &kp GREATER_THAN     &kp RIGHT_BRACE               &kp RIGHT_PARENTHESIS             &kp RIGHT_BRACKET    &none      &none                   &trans                    &trans               &trans     &trans
			&trans                        &trans                            &trans               &trans     &trans                  &trans
			>;
		};
		
		num {
			// -----------------------------------------------------------------------------------------
			// |  TAB |  1  |  2  |  3  |  4  |  5  |   |  6  |  7  |  8  |  9  |  0  | BKSP |
			// | BTCLR| BT1 | BT2 | BT3 | BT4 | BT5 |   | LFT | DWN |  UP | RGT |     |      |
			// | SHFT |     |     |     |     |     |   |     |     |     |     |     |      |
			//                    | GUI |     | SPC |   | ENT |     | ALT |
			
			bindings = <
			&trans  &none      &none         &none             &none           &none     &kp PERIOD    &kp N7  &kp N8  &kp N9  &none  &trans
			&to 0   &kp LCTRL  &kp LEFT_ALT  &kp LEFT_COMMAND  &kp LEFT_SHIFT  &none     &kp COMMA     &kp N4  &kp N5  &kp N6  &to 3  &none
			&trans  &none      &none         &none             &none           &none     &kp NUMBER_0  &kp N1  &kp N2  &kp N3  &none  &none
			&trans            &trans          &trans    &trans        &trans  &trans
			>;
		};
		
		f_keys {
			bindings = <
			&trans  &bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2      &bt BT_SEL 3    &bt BT_CLR_ALL    &none    &kp F7  &kp F8  &kp F9  &none    &trans
			&to 0   &kp LCTRL     &kp LEFT_ALT  &kp LEFT_COMMAND  &kp LEFT_SHIFT  &none             &kp F10  &kp F4  &kp F5  &kp F6  &kp F11  &kp F12
			&trans  &none         &none         &none             &none           &none             &none    &kp F1  &kp F2  &kp F3  &none    &trans
			&trans            &trans          &trans            &trans   &trans  &trans
			>;
		};
		
		mouse_ {
			bindings = <
			&trans  &none      &mkp RCLK     &mkp MCLK         &mkp LCLK       &none     &msc SCRL_DOWN  &mkp LCLK       &mmv MOVE_UP    &mkp RCLK        &none  &trans
			&to 0   &kp LCTRL  &kp LEFT_ALT  &kp LEFT_COMMAND  &kp LEFT_SHIFT  &none     &msc SCRL_UP    &mmv MOVE_LEFT  &mmv MOVE_DOWN  &mmv MOVE_RIGHT  &none  &trans
			&trans  &none      &none         &none             &none           &none     &none           &none           &none           &none            &none  &trans
			&trans            &trans          &trans    &trans          &trans          &trans
			>;
		};
		
		arrows_and_media {
			bindings = <
			&trans  &none      &kp C_PREV    &kp C_PP          &kp C_NEXT      &kp C_VOLUME_UP    &kp PAGE_UP    &none     &kp UP_ARROW  &none      &none   &trans
			&to 0   &kp LCTRL  &kp LEFT_ALT  &kp LEFT_COMMAND  &kp LEFT_SHIFT  &kp C_VOL_DN       &kp PAGE_DOWN  &kp LEFT  &kp DOWN      &kp RIGHT  &trans  &trans
			&trans  &none      &none         &none             &none           &kp K_MUTE         &none          &none     &trans        &trans     &trans  &trans
			&trans            &trans          &trans             &trans         &trans    &trans
			>;
		};
	};
};