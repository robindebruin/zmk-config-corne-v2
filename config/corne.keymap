/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/pointing.h>




/* ------ MOUSE CLICK SETTINGS----- */
#define ZMK_POINTING_DEFAULT_MOVE_VAL 1100  // default: 600 the default value of the max speed depends on this
&mmv {
        x-input-code = <INPUT_REL_X>;
        y-input-code = <INPUT_REL_Y>;
        time-to-max-speed-ms = <700>; // DEFAULT: 300
        acceleration-exponent = <1>;
};
/* ------------------------------- */

/* ------MOUSE SCROLL SETTINGS----- */
#define ZMK_POINTING_DEFAULT_SCRL_VAL 15    // default: 10
&msc {
    x-input-code = <INPUT_REL_HWHEEL>;
    y-input-code = <INPUT_REL_WHEEL>;
    time-to-max-speed-ms = <700>; // DEFAULT: 300
    acceleration-exponent = <0>;
};
/* ------------------------------- */



/ {
          behaviors {
        hml: hml {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            bindings = <&kp>, <&kp>;

            tapping-term-ms = <280>;
            flavor = "balanced";
            quick-tap-ms = <175>;
            require-prior-idle-ms = <150>;
            hold-trigger-key-positions = <6 7 8 9 10 11 18 19 20 21 22 23 30 31 32 33 34 35 39 40 41 38 37 36>;
            hold-trigger-on-release;
        };

        hmr: hmr {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            bindings = <&kp>, <&kp>;

            tapping-term-ms = <280>;
            flavor = "balanced";

            // when pressed _again_ within this time tap behavior will be triggered

            quick-tap-ms = <175>;

            // require-prior-idle-ms is like quick-tap-ms however it will apply for any non-modifier key pressed before it. 
            //  dus key a > shift b (shift b is dan waar dit gedefineerd is) binnen deze tijd is alijd ab.
            // This effectively disables the hold-tap when typing quickly.

            require-prior-idle-ms = <150>;

            // if you press any key NOT listed in hold-trigger-key-positions before tapping-term-ms expires, it will produce a tap.
            // dus een key die wel in deze lijst staat houd de hold trigger aan.

            hold-trigger-key-positions = <0 1 2 3 4 5 12 13 14 15 16 17 24 25 26 27 28 29 36 37 38 39 41 40>;
            hold-trigger-on-release;
        };

        moto: moto {
            compatible = "zmk,behavior-hold-tap";
            bindings = <&kp>, <&to>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
        };
    };



        keymap {
                compatible = "zmk,keymap";

        default_layer {
            // -----------------------------------------------------------------------------------------
            // |  TAB |  Q  |  W  |  E  |  R  |  T  |   |  Y  |  U   |  I  |  O  |  P  | BKSP |
            // | CTRL |  A  |  S  |  D  |  F  |  G  |   |  H  |  J   |  K  |  L  |  ;  |  '   |
            // | SHFT |  Z  |  X  |  C  |  V  |  B  |   |  N  |  M   |  ,  |  .  |  /  | ESC  |
            //                    | GUI | LWR | SPC |   | ENT | RSE  | ALT |

            bindings = <
&kp TAB     &kp Q         &kp W            &kp E                 &kp R              &kp T         &kp Y      &kp U               &kp I                 &kp O             &kp P                 &kp BSPC
&none       &hml LCTRL A  &hml LEFT_ALT S  &hml LEFT_COMMAND D   &hml LEFT_SHIFT F  &kp G         &kp H      &hmr RIGHT_SHIFT J  &hmr RIGHT_COMMAND K  &hmr RIGHT_ALT L  &hmr RCTRL SEMICOLON  &hmr RIGHT_SHIFT APOS
&kp ESCAPE  &kp Z         &kp X            &kp C                 &kp V              &kp B         &kp N      &kp M               &kp COMMA             &kp DOT           &kp FSLH              &kp ESC
                                           &moto LEFT_COMMAND 4  &to 1              &kp RETURN    &kp SPACE  &to 2               &moto RIGHT_ALT 5
            >;
        };

                lower_layer {
// -----------------------------------------------------------------------------------------
// |  TAB |  1  |  2  |  3  |  4  |  5  |   |  6  |  7  |  8  |  9  |  0  | BSPC |
// | BTCLR| BT1 | BT2 | BT3 | BT4 | BT5 |   | LFT | DWN |  UP | RGT |     |      |
// | SHFT |     |     |     |     |     |   |     |     |     |     |     |      |
//                    | GUI |     | SPC |   | ENT |     | ALT |
                        bindings = <
   &kp TAB    &kp N1       &kp N2       &kp N3       &kp N4       &kp N5         &kp N6   &kp N7   &kp N8 &kp N9    &kp N0 &kp BSPC
   &bt BT_CLR &bt BT_SEL 0 &bt BT_SEL 1 &bt BT_SEL 2 &bt BT_SEL 3 &bt BT_SEL 4   &kp LEFT &kp DOWN &kp UP &kp RIGHT &trans &trans
   &kp LSHFT  &trans       &trans       &trans       &trans       &trans         &trans   &trans   &trans &trans    &trans &trans
                                    &kp LGUI     &trans       &kp SPACE      &kp RET  &trans   &kp RALT
                        >;
                };

                raise_layer {
// -----------------------------------------------------------------------------------------
// |  TAB |  !  |  @  |  #  |  $  |  %  |   |  ^  |  &  |  *  |  (  |  )  | BSPC |
// | CTRL |     |     |     |     |     |   |  -  |  =  |  [  |  ]  |  \  |  `   |
// | SHFT |     |     |     |     |     |   |  _  |  +  |  {  |  }  | "|" |  ~   |
//                    | GUI |     | SPC |   | ENT |     | ALT |
                        bindings = <
   &kp  TAB  &kp EXCL &kp AT &kp HASH &kp DLLR &kp PRCNT   &kp CARET &kp AMPS  &kp ASTRK &kp LPAR &kp RPAR &kp BSPC
   &kp LCTRL &trans   &trans &trans   &trans   &trans      &kp MINUS &kp EQUAL &kp LBKT  &kp RBKT &kp BSLH &kp GRAVE
   &kp LSHFT &trans   &trans &trans   &trans   &trans      &kp UNDER &kp PLUS  &kp LBRC  &kp RBRC &kp PIPE &kp TILDE
                             &kp LGUI &trans   &kp SPACE   &kp RET   &trans    &kp RALT
                        >;
                };
        };
};
